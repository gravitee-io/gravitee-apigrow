{"version":3,"sources":["Components/mindmap/Checkbox.js","styles/EditNodeMenu.css.js","Components/mindmap/EditNodeMenu.js","Components/base/MindmapView.js"],"names":["theme","createMuiTheme","overrides","MuiIconButton","root","fontSize","label","display","useStyles","makeStyles","backgroundColor","icon","props","fontWeight","borderRadius","border","customcolor","color","width","height","background","boxShadow","checkedIcon","StyledCheckbox","classes","ThemeProvider","Checkbox","className","clsx","CustomizedCheckbox","style","margin","styles","editContainer","overflowY","overflowX","padding","minWidth","zIndex","fieldContainer","formControl","formLabel","ExpansionPanelDetails","hideEditIcon","marginBottom","hideIconContainer","justifyContent","referencePaper","ToolsMenu","state","models","onChange","node","target","name","checked","verbs","value","referenceId","id","children","onToolsMenuChange","onBranchColorChange","branchColor","hex","onSubpathCheckboxChange","isSubPath","handleChange","event","setState","ModelAPI","getModels","organization","this","pageSize","then","data","filter","model","modelId","prevProps","isFocus","nameInput","focus","onEditClick","patchable","notImplemented","xDescription","verb","IconButton","onClick","Tooltip","title","placement","TextField","disabled","parent","InputLabelProps","shrink","variant","onKeyDown","e","keyCode","onEnterDown","inputRef","input","multiline","description","type","autoComplete","example","FormControl","InputLabel","ref","InputLabelRef","htmlFor","Select","native","OutlinedInput","labelWidth","Paper","Typography","map","key","freezeTag","isArray","triangle","onChangeComplete","queryable","abstract","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","heading","calculated","paginable","queryParams","component","FormLabel","FormGroup","includes","Component","withStyles","MindmapView","history","saved","canBeSaved","currentNode","nodeKey","refinerRules","livePreviewSwagger","isLivePreviewOpen","isEditMenuOpen","location","organizationId","intervalId","onNodeSelect","onTreeUpdate","dataUpdated","push","requestLivePreview","saveModel","hasExited","isPublic","catch","err","response","status","Notification","error","message","newNode","hasOwnProperty","concat","updateTree","onPreviewClick","onPreviewClose","onUndo","length","pop","setFocus","onFocus","a","trackPromise","SwaggerAPI","result","getModel","secsBetweenLastUpdateAndNow","Date","now","updatedAt","getTime","Math","abs","pathname","setInterval","clearInterval","preview","direction","handleClass","customHandle","borderClass","customResizeBorder","position","right","maxWidth","LivePreview","swagger","treeWidth","svgContainer","Slide","in","mountOnEnter","unmountOnExit","EditNodeMenu","context","user","organizations","Tree","animated","newModel","handleNewModelWarningOpen","onLetterDown","showIcon","showIconEdit","contextType","UserContext","withRouter"],"mappings":"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","file":"static/js/20.ced4e36e.chunk.js","sourcesContent":["import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, createMuiTheme } from '@material-ui/core/styles';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nconst theme = createMuiTheme({\r\n  overrides: {\r\n    MuiIconButton: {\r\n      root: {\r\n        fontSize: '1rem'\r\n      },\r\n      label: {\r\n        display: 'block'\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    '&:hover': {\r\n      backgroundColor: 'transparent'\r\n    }\r\n  },\r\n  icon: props => ({\r\n    fontSize: '15px',\r\n    fontWeight: 'bold',\r\n    borderRadius: 30,\r\n    display: 'table-cell',\r\n    border: `3px solid ${props.customcolor}`,\r\n    color: props.customcolor,\r\n    width: 90,\r\n    height: 30,\r\n    'input:hover ~ &': {\r\n      backgroundColor: '#ebf1f5'\r\n    },\r\n    'input:disabled ~ &': {\r\n      background: 'rgba(206,217,224,.5)'\r\n    },\r\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)'\r\n  }),\r\n  checkedIcon: props => ({\r\n    borderRadius: 30,\r\n    display: 'table-cell',\r\n    border: `3px solid ${props.customcolor}`,\r\n    color: 'white',\r\n    backgroundColor: `${props.customcolor}`,\r\n    width: 90,\r\n    height: 30,\r\n    'input:hover ~ &': {\r\n      backgroundColor: '#ebf1f5'\r\n    },\r\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)'\r\n  })\r\n});\r\n\r\nfunction StyledCheckbox(props) {\r\n  const classes = useStyles(props);\r\n\r\n  return (\r\n    <>\r\n      <ThemeProvider theme={theme}>\r\n        <Checkbox\r\n          className={classes.root}\r\n          checkedIcon={\r\n            <span className={clsx(classes.icon, classes.checkedIcon)}>\r\n              {props.label}\r\n            </span>\r\n          }\r\n          icon={<span className={classes.icon}>{props.label}</span>}\r\n          {...props}\r\n        />\r\n      </ThemeProvider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default function CustomizedCheckbox(props) {\r\n  return (\r\n    <div style={{ margin: 'auto' }}>\r\n      <StyledCheckbox {...props} />\r\n    </div>\r\n  );\r\n}\r\n","const styles = () => {\r\n  return {\r\n    margin: {\r\n      margin: 'auto'\r\n    },\r\n    editContainer: {\r\n      overflowY: 'auto',\r\n      overflowX: 'hidden',\r\n      padding: '10px !important',\r\n      backgroundColor: 'white',\r\n      width: '20%',\r\n      minWidth: '20%',\r\n      zIndex: 10\r\n    },\r\n    fieldContainer: {\r\n      padding: '10px',\r\n      display: 'grid'\r\n    },\r\n    formControl: {\r\n      margin: '10px'\r\n    },\r\n    formLabel: {\r\n      margin: 'auto',\r\n      fontSize: '1.4em',\r\n      padding: '10px'\r\n    },\r\n    ExpansionPanelDetails: {\r\n      display: 'grid'\r\n    },\r\n    hideEditIcon: {\r\n      color: '#324157',\r\n      width: 'fit-content',\r\n      marginBottom: '10px'\r\n    },\r\n    hideIconContainer: {\r\n      width: '100%',\r\n      display: 'flex',\r\n      justifyContent: 'flex-end'\r\n    },\r\n    referencePaper: {\r\n      padding: '20px',\r\n      display: 'inline-grid',\r\n      margin: '10px'\r\n    }\r\n  };\r\n};\r\n\r\nexport default styles;\r\n","/* eslint-disable jsx-a11y/label-has-associated-control */\r\n/* eslint-disable jsx-a11y/label-has-for */\r\nimport React, { Component } from 'react';\r\nimport {\r\n  Tooltip,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  OutlinedInput,\r\n  Checkbox,\r\n  ExpansionPanel,\r\n  ExpansionPanelSummary,\r\n  Typography,\r\n  ExpansionPanelDetails,\r\n  FormLabel,\r\n  FormGroup,\r\n  Paper,\r\n  IconButton\r\n} from '@material-ui/core';\r\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { TwitterPicker } from 'react-color';\r\nimport CustomizedCheckbox from './Checkbox';\r\nimport ModelAPI from '../../api/ModelAPI';\r\nimport styles from '../../styles/EditNodeMenu.css';\r\n\r\nclass ToolsMenu extends Component {\r\n  state = {\r\n    models: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    ModelAPI.getModels({\r\n      organization: this.props.organization,\r\n      pageSize: 0\r\n    }).then(models => {\r\n      this.setState({\r\n        models: models.data.data.filter(\r\n          model => model.id !== this.props.modelId\r\n        )\r\n      });\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.isFocus !== prevProps.isFocus && this.nameInput) {\r\n      this.nameInput.focus();\r\n    }\r\n  }\r\n\r\n  onChange = ({ target }) => {\r\n    let node;\r\n    if (\r\n      target.name === 'abstract' ||\r\n      target.name === 'queryable' ||\r\n      target.name === 'paginable' ||\r\n      target.name === 'calculated' ||\r\n      target.name === 'patchable' ||\r\n      target.name === 'notImplemented' ||\r\n      target.name === 'isArray'\r\n    ) {\r\n      node = { [target.name]: target.checked };\r\n    } else if (\r\n      target.name === 'SEARCH' ||\r\n      target.name === 'POST' ||\r\n      target.name === 'GET' ||\r\n      target.name === 'PUT' ||\r\n      target.name === 'DELETE'\r\n    ) {\r\n      node = { verbs: [target.name] };\r\n    } else {\r\n      node = { [target.name]: target.value };\r\n    }\r\n\r\n    if (target.name === 'type' && target.value === 'reference') {\r\n      node.referenceId = this.state.models[0].id;\r\n      node.children = [];\r\n    }\r\n\r\n    this.props.onToolsMenuChange(node);\r\n  };\r\n\r\n  onBranchColorChange = color => {\r\n    const node = { branchColor: color.hex };\r\n    this.props.onToolsMenuChange(node);\r\n  };\r\n\r\n  onSubpathCheckboxChange = ({ target }) => {\r\n    const node = { isSubPath: target.checked };\r\n    // onToolsMenuChange requires to set the verbs in order to autoselect operations\r\n    // when creating a new child node\r\n    // Also, we can't just pass READ and UPDATE, all fields are required\r\n    if (target.checked) {\r\n      node.verbs = ['SEARCH', 'POST', 'PUT', 'GET', 'DELETE'];\r\n    }\r\n    this.props.onToolsMenuChange(node);\r\n  };\r\n\r\n  handleChange = name => event => {\r\n    this.setState({ ...name, [name]: event.target.checked });\r\n  };\r\n\r\n  render() {\r\n    const { node, classes, onEditClick } = this.props;\r\n    node.patchable = !!node.patchable;\r\n    node.notImplemented = !!node.notImplemented;\r\n    node.xDescription = node.xDescription || '';\r\n    node.verbs = node.verbs || ['SEARCH', 'POST', 'PUT', 'GET', 'DELETE'];\r\n    node.branchColor = node.branchColor || '#FCB900';\r\n\r\n    node.verbs = node.verbs.filter(verb => verb !== 'UPDATE'); // Update should not be a verb\r\n\r\n    return (\r\n      <div className={classes.editContainer}>\r\n        <div className={classes.fieldContainer}>\r\n          <div className={classes.hideIconContainer}>\r\n            <IconButton\r\n              id=\"editHideButton\"\r\n              onClick={onEditClick}\r\n              className={classes.hideEditIcon}\r\n            >\r\n              <VisibilityOffIcon />\r\n            </IconButton>\r\n          </div>\r\n          <label className=\"title-menu\">Edit attribute</label>\r\n\r\n          <Tooltip\r\n            title=\"Name of the attribute. Special case: if you specify comma-separated words, they'll serve as a list of possible values for the parent\"\r\n            placement=\"right\"\r\n          >\r\n            <TextField\r\n              disabled={!node.parent}\r\n              InputLabelProps={{ shrink: true }}\r\n              id=\"outlined-email-input\"\r\n              label=\"Label\"\r\n              name=\"name\"\r\n              margin=\"normal\"\r\n              variant=\"outlined\"\r\n              onChange={this.onChange}\r\n              onKeyDown={e => {\r\n                if (e.keyCode === 13) {\r\n                  this.props.onEnterDown();\r\n                }\r\n              }}\r\n              className=\"item-sidepanel\"\r\n              value={node.name}\r\n              inputRef={input => {\r\n                this.nameInput = input;\r\n              }}\r\n            />\r\n          </Tooltip>\r\n\r\n          {node.parent && (\r\n            <>\r\n              <Tooltip\r\n                title=\"A description to help developer who will use the API\"\r\n                placement=\"right\"\r\n              >\r\n                <TextField\r\n                  multiline\r\n                  disabled={!node.parent}\r\n                  InputLabelProps={{ shrink: true }}\r\n                  id=\"outlined-textarea\"\r\n                  label=\"Description\"\r\n                  name=\"description\"\r\n                  margin=\"normal\"\r\n                  variant=\"outlined\"\r\n                  onChange={this.onChange}\r\n                  className=\"item-sidepanel\"\r\n                  value={node.description}\r\n                />\r\n              </Tooltip>\r\n              <Tooltip\r\n                title=\"The description that isn't public or included in the Swagger but only displayed to help API\"\r\n                placement=\"right\"\r\n              >\r\n                <TextField\r\n                  multiline\r\n                  disabled={!node.parent}\r\n                  InputLabelProps={{ shrink: true }}\r\n                  id=\"outlined-email-input\"\r\n                  label=\"Example\"\r\n                  type=\"example\"\r\n                  name=\"example\"\r\n                  autoComplete=\"example\"\r\n                  margin=\"normal\"\r\n                  variant=\"outlined\"\r\n                  onChange={this.onChange}\r\n                  className=\"item-sidepanel\"\r\n                  value={node.example}\r\n                />\r\n              </Tooltip>\r\n              <FormControl\r\n                disabled={!node.parent}\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n              >\r\n                <InputLabel\r\n                  ref={ref => {\r\n                    this.InputLabelRef = ref;\r\n                  }}\r\n                  htmlFor=\"type-select\"\r\n                >\r\n                  Type\r\n                </InputLabel>\r\n                <Select\r\n                  className=\"dropdown\"\r\n                  native\r\n                  value={node.type}\r\n                  onChange={this.onChange}\r\n                  input={\r\n                    <OutlinedInput\r\n                      name=\"type\"\r\n                      labelWidth={35}\r\n                      id=\"type-select\"\r\n                    />\r\n                  }\r\n                >\r\n                  <option value=\"integer\">integer</option>\r\n                  <option value=\"number\">number</option>\r\n                  <option value=\"string\">text</option>\r\n                  <option value=\"boolean\">boolean</option>\r\n                  <option value=\"array\">list</option>\r\n                  <option value=\"object\">object</option>\r\n                  <option value=\"reference\">reference to...</option>\r\n                </Select>\r\n              </FormControl>\r\n              {node.type === 'reference' && (\r\n                <Paper className={classes.referencePaper}>\r\n                  <Typography>Reference</Typography>\r\n                  <FormControl variant=\"outlined\" margin=\"normal\">\r\n                    <InputLabel\r\n                      ref={ref => {\r\n                        this.InputLabelRef = ref;\r\n                      }}\r\n                      htmlFor=\"reference-select\"\r\n                    >\r\n                      Model\r\n                    </InputLabel>\r\n                    <Select\r\n                      className=\"dropdown\"\r\n                      native\r\n                      value={node.referenceId}\r\n                      onChange={this.onChange}\r\n                      input={\r\n                        <OutlinedInput\r\n                          name=\"referenceId\"\r\n                          labelWidth={45}\r\n                          id=\"reference-select\"\r\n                        />\r\n                      }\r\n                    >\r\n                      {this.state.models.map(model => {\r\n                        return (\r\n                          <option key={model.id} value={model.id}>{`${\r\n                            model.name\r\n                          }${\r\n                            model.freezeTag !== '0' ? ' (frozen)' : ''\r\n                          }`}</option>\r\n                        );\r\n                      })}\r\n                    </Select>\r\n                  </FormControl>\r\n                  <Tooltip\r\n                    title=\"Determine if the reference model should be a simple object or an array\"\r\n                    placement=\"right\"\r\n                  >\r\n                    <label>\r\n                      <Checkbox\r\n                        color=\"default\"\r\n                        onChange={this.onChange}\r\n                        type=\"checkbox\"\r\n                        name=\"isArray\"\r\n                        checked={node.isArray}\r\n                      />\r\n                      Is Array\r\n                    </label>\r\n                  </Tooltip>\r\n                  <>\r\n                    <Tooltip\r\n                      title=\"Define branch color (with children)\"\r\n                      placement=\"right\"\r\n                    >\r\n                      <label\r\n                        style={{ fontSize: '14px', 'padding-bottom': '10px' }}\r\n                      >\r\n                        Color Branch\r\n                      </label>\r\n                    </Tooltip>\r\n                    <TwitterPicker\r\n                      color={node.branchColor}\r\n                      triangle=\"hide\"\r\n                      width=\"auto\"\r\n                      onChangeComplete={this.onBranchColorChange}\r\n                      style={{ 'padding-bottom': '20px', margin: 'auto' }}\r\n                    />\r\n                  </>\r\n                </Paper>\r\n              )}\r\n              {node.type !== 'reference' && (\r\n                <Tooltip\r\n                  title=\"make this field searchable (include it in query params for searchs with GET /objects?field=...)\"\r\n                  placement=\"right\"\r\n                >\r\n                  <label>\r\n                    <Checkbox\r\n                      disabled={!node.parent}\r\n                      color=\"default\"\r\n                      onChange={this.onChange}\r\n                      type=\"checkbox\"\r\n                      name=\"queryable\"\r\n                      checked={node.queryable}\r\n                    />\r\n                    Searchable\r\n                  </label>\r\n                </Tooltip>\r\n              )}\r\n              <Tooltip\r\n                title=\"make this field appear in search results (reponse to GET /objects)\"\r\n                placement=\"right\"\r\n              >\r\n                <label>\r\n                  <Checkbox\r\n                    disabled={!node.parent}\r\n                    color=\"default\"\r\n                    onChange={this.onChange}\r\n                    type=\"checkbox\"\r\n                    name=\"abstract\"\r\n                    checked={node.abstract}\r\n                  />\r\n                  In abstract\r\n                </label>\r\n              </Tooltip>\r\n            </>\r\n          )}\r\n          {node.type !== 'reference' && (\r\n            <ExpansionPanel>\r\n              <ExpansionPanelSummary\r\n                expandIcon={<ExpandMoreIcon />}\r\n                aria-controls=\"panel1a-content\"\r\n                id=\"panel1a-header\"\r\n              >\r\n                <Typography className={classes.heading}>\r\n                  Advanced settings\r\n                </Typography>\r\n              </ExpansionPanelSummary>\r\n              <ExpansionPanelDetails className={classes.ExpansionPanelDetails}>\r\n                <>\r\n                  <Tooltip\r\n                    title=\"Define color branch (with children)\"\r\n                    placement=\"right\"\r\n                  >\r\n                    <label\r\n                      style={{ fontSize: '14px', 'padding-bottom': '10px' }}\r\n                    >\r\n                      Color branch\r\n                    </label>\r\n                  </Tooltip>\r\n                  <TwitterPicker\r\n                    color={node.branchColor}\r\n                    triangle=\"hide\"\r\n                    width=\"auto\"\r\n                    onChangeComplete={this.onBranchColorChange}\r\n                    style={{ 'padding-bottom': '20px', margin: 'auto' }}\r\n                  />\r\n                </>\r\n                {node.parent && (\r\n                  <>\r\n                    <Tooltip\r\n                      title=\"Make a sub context for this field (will be accessible by GET /objects/thisfield).\"\r\n                      placement=\"right\"\r\n                    >\r\n                      <label>\r\n                        <Checkbox\r\n                          disabled={!node.parent}\r\n                          color=\"default\"\r\n                          onChange={this.onSubpathCheckboxChange}\r\n                          type=\"checkbox\"\r\n                          name=\"isSubPath\"\r\n                          checked={node.isSubPath}\r\n                        />\r\n                        Subpath\r\n                      </label>\r\n                    </Tooltip>\r\n                    <Tooltip\r\n                      title=\"When this box is checked, the attribute will be individually updatable. Otherwise, updates are only possible for all the fields together.\"\r\n                      placement=\"right\"\r\n                    >\r\n                      <label>\r\n                        <Checkbox\r\n                          disabled={!node.parent}\r\n                          color=\"default\"\r\n                          onChange={this.onChange}\r\n                          type=\"checkbox\"\r\n                          name=\"patchable\"\r\n                          checked={node.patchable}\r\n                        />\r\n                        Partial update\r\n                      </label>\r\n                    </Tooltip>\r\n                    <Tooltip\r\n                      title=\"Fields that are not yet implemented do not appear in the swagger result\"\r\n                      placement=\"right\"\r\n                    >\r\n                      <label style={{ fontSize: '14px' }}>\r\n                        <Checkbox\r\n                          disabled={!node.parent}\r\n                          color=\"default\"\r\n                          onChange={this.onChange}\r\n                          type=\"checkbox\"\r\n                          name=\"notImplemented\"\r\n                          checked={node.notImplemented}\r\n                        />\r\n                        Not yet implemented\r\n                      </label>\r\n                    </Tooltip>\r\n                    <Tooltip\r\n                      title=\"calculated fields are not included in object creation requests (POST body) because one does not know their value at creation time\"\r\n                      placement=\"right\"\r\n                    >\r\n                      <label>\r\n                        <Checkbox\r\n                          disabled={!node.parent}\r\n                          color=\"default\"\r\n                          onChange={this.onChange}\r\n                          type=\"checkbox\"\r\n                          name=\"calculated\"\r\n                          checked={node.calculated}\r\n                        />\r\n                        Calculated\r\n                      </label>\r\n                    </Tooltip>\r\n                  </>\r\n                )}\r\n                {node.type !== 'reference' && (\r\n                  <>\r\n                    <Tooltip\r\n                      title=\"make the results paginated (adds the query parameters page & pageSize)\"\r\n                      placement=\"right\"\r\n                    >\r\n                      <label>\r\n                        <Checkbox\r\n                          disabled={\r\n                            ((!node.isSubPath || node.type !== 'array') &&\r\n                              !!node.parent) ||\r\n                            false\r\n                          }\r\n                          color=\"default\"\r\n                          onChange={this.onChange}\r\n                          type=\"checkbox\"\r\n                          name=\"paginable\"\r\n                          checked={node.paginable}\r\n                        />\r\n                        Pagination\r\n                      </label>\r\n                    </Tooltip>\r\n                    <Tooltip\r\n                      title=\"Optionally define here additionals query params, comma-separated. Those terms come in addition to the ones that are 'searchable'\"\r\n                      placement=\"right\"\r\n                    >\r\n                      <TextField\r\n                        disabled={\r\n                          ((!node.isSubPath || node.type !== 'array') &&\r\n                            !!node.parent) ||\r\n                          false\r\n                        }\r\n                        label=\"Query Params\"\r\n                        type=\"queryParams\"\r\n                        name=\"queryParams\"\r\n                        margin=\"normal\"\r\n                        variant=\"outlined\"\r\n                        onChange={this.onChange}\r\n                        className=\"item-sidepanel\"\r\n                        value={node.queryParams || ''}\r\n                      />\r\n                    </Tooltip>\r\n                    <Tooltip\r\n                      title=\"An optional, internal explanation for those who have to implement this API. For instance the database where to find the data for this attribute. ( Not included in the public Swagger )\"\r\n                      placement=\"right\"\r\n                    >\r\n                      <TextField\r\n                        multiline\r\n                        disabled={!node.parent}\r\n                        InputLabelProps={{ shrink: true }}\r\n                        id=\"outlined-textarea\"\r\n                        label=\"Internal Description\"\r\n                        name=\"xDescription\"\r\n                        margin=\"normal\"\r\n                        variant=\"outlined\"\r\n                        onChange={this.onChange}\r\n                        className=\"item-sidepanel\"\r\n                        value={node.xDescription}\r\n                      />\r\n                    </Tooltip>\r\n                  </>\r\n                )}\r\n                {(node.isSubPath || !node.parent) && (\r\n                  <FormControl\r\n                    component=\"fieldset\"\r\n                    className={classes.formControl}\r\n                  >\r\n                    <FormLabel className={classes.formLabel} component=\"legend\">\r\n                      Operations\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                      {(!node.parent || node.type === 'array') && (\r\n                        <CustomizedCheckbox\r\n                          customcolor=\"#61affe\"\r\n                          label=\"SEARCH\"\r\n                          name=\"SEARCH\"\r\n                          type=\"checkbox\"\r\n                          checked={node.verbs.includes('SEARCH')}\r\n                          onChange={this.onChange}\r\n                        />\r\n                      )}\r\n                      {(!node.parent || node.type === 'array') && (\r\n                        <CustomizedCheckbox\r\n                          customcolor=\"#49cc90\"\r\n                          label=\"CREATE\"\r\n                          name=\"POST\"\r\n                          type=\"checkbox\"\r\n                          checked={node.verbs.includes('POST')}\r\n                          onChange={this.onChange}\r\n                        />\r\n                      )}\r\n                      <CustomizedCheckbox\r\n                        customcolor=\"#61affe\"\r\n                        label=\"READ\"\r\n                        name=\"GET\"\r\n                        type=\"checkbox\"\r\n                        checked={node.verbs.includes('GET')}\r\n                        onChange={this.onChange}\r\n                      />\r\n                      <CustomizedCheckbox\r\n                        customcolor=\"#fca130\"\r\n                        label=\"UPDATE\"\r\n                        name=\"PUT\"\r\n                        type=\"checkbox\"\r\n                        checked={node.verbs.includes('PUT')}\r\n                        onChange={this.onChange}\r\n                      />\r\n                      {(!node.parent || node.type === 'array') && (\r\n                        <CustomizedCheckbox\r\n                          customcolor=\"#f93e3e\"\r\n                          label=\"DELETE\"\r\n                          name=\"DELETE\"\r\n                          type=\"checkbox\"\r\n                          checked={node.verbs.includes('DELETE')}\r\n                          onChange={this.onChange}\r\n                        />\r\n                      )}\r\n                    </FormGroup>\r\n                  </FormControl>\r\n                )}\r\n              </ExpansionPanelDetails>\r\n            </ExpansionPanel>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(ToolsMenu);\r\n","/* eslint-disable consistent-return */\r\nimport React, { Component } from 'react';\r\nimport { Notification } from 'element-react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport ResizePanel from 'react-resize-panel';\r\nimport { trackPromise } from 'react-promise-tracker';\r\nimport Tree from '../mindmap/Tree';\r\nimport { updateTree } from '../../helpers/tree_helper';\r\nimport EditNodeMenu from '../mindmap/EditNodeMenu';\r\nimport LivePreview from '../mindmap/LivePreview';\r\nimport SwaggerAPI from '../../api/SwaggerAPI';\r\nimport ModelAPI from '../../api/ModelAPI';\r\nimport styles from '../../styles/MindmapView.css';\r\nimport { UserContext } from '../../contexts/UserContext';\r\n\r\nconst secondsBeforeEdit = process.env.NODE_ENV !== 'production' ? 0 : 11;\r\n\r\nclass MindmapView extends Component {\r\n  static contextType = UserContext;\r\n\r\n  state = {\r\n    history: [],\r\n    saved: false,\r\n    canBeSaved: false,\r\n    currentNode: { nodeKey: '' },\r\n    data: { children: [], name: '' },\r\n    refinerRules: [],\r\n    livePreviewSwagger: null,\r\n    isLivePreviewOpen: true,\r\n    isEditMenuOpen: true,\r\n    focus: 'tree',\r\n    modelId: this.props.location.state\r\n      ? this.props.location.state.modelId\r\n      : null,\r\n    organizationId: this.props.location.state\r\n      ? this.props.location.state.organizationId\r\n      : null\r\n  };\r\n\r\n  intervalId = null;\r\n\r\n  componentDidMount() {\r\n    const { location, history } = this.props;\r\n\r\n    if (!location.state) {\r\n      history.push('/dashboard');\r\n    } else {\r\n      const { data, modelId, isPublic } = location.state;\r\n\r\n      if (!isPublic) {\r\n        ModelAPI.getModel(modelId).then(model => {\r\n          // TODO: Remove this s...\r\n          // Check for 11 seconds between model updatedAt field and now\r\n          // Then allow to edit model or redirect on Dashboard page\r\n          const secsBetweenLastUpdateAndNow = (Date.now() - new Date(model.updatedAt).getTime()) / 1000;\r\n\r\n          if ((!model.hasExited) && (Math.abs(secsBetweenLastUpdateAndNow) < secondsBeforeEdit)) {\r\n            history.push({\r\n              pathname: '/dashboard',\r\n              state: {\r\n                error: 'Someone already editing this model. Please try again later'\r\n              }\r\n            });\r\n          }\r\n\r\n          this.setState(\r\n            {\r\n              data: model.data,\r\n              refinerRules: model.refinerRules || [],\r\n              currentNode: { ...model.data },\r\n              canBeSaved: true\r\n            },\r\n            () => {\r\n              this.saveModel(false);\r\n              this.requestLivePreview(this.state.data);\r\n            }\r\n          );\r\n        });\r\n      } else {\r\n        this.setState(\r\n          {\r\n            data,\r\n            currentNode: { ...data }\r\n          },\r\n          () => {\r\n            this.saveModel(false);\r\n            this.requestLivePreview(this.state.data);\r\n          }\r\n        );\r\n      }\r\n\r\n      this.intervalId = setInterval(() => {\r\n        if (this.state.canBeSaved) {\r\n          this.saveModel(false);\r\n        }\r\n      }, 10000);\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.intervalId);\r\n    if (this.state.canBeSaved) {\r\n      this.saveModel(true);\r\n    }\r\n}\r\n\r\n  onNodeSelect = node => {\r\n    this.setState({\r\n      currentNode: { ...node }\r\n    });\r\n  };\r\n\r\n  onTreeUpdate = ({ dataUpdated, currentNode }) => {\r\n    const { history, data } = this.state;\r\n    history.push(data);\r\n    this.setState({ data: dataUpdated, currentNode, history, saved: false });\r\n    this.requestLivePreview(dataUpdated);\r\n  };\r\n\r\n  saveModel = (hasExited) => {\r\n    // eslint-disable-next-line\r\n    const { saved, modelId, data } = this.state;\r\n    const { isPublic } = this.props.location.state;\r\n\r\n    if (!hasExited) {\r\n//      if (saved || isPublic) {   tant que le verrou d'édition concurrente est basé sur la date de sauvegarde, il faut sauvegarder même si pas de changement\r\n        if (isPublic) {\r\n          return;\r\n      }\r\n    }\r\n\r\n    ModelAPI.saveModel(modelId, { data }, hasExited)\r\n      .then(() => {\r\n        this.setState({ saved: true });\r\n      })\r\n      .catch(err => {\r\n        if (err.response.status === 403) {\r\n          Notification.error({\r\n            title: 'Error',\r\n            message:\r\n              'You can only modify your own models. Please ask your team leader if you need a modification on this model.'\r\n          });\r\n        } else {\r\n          Notification.error({\r\n            title: 'Error',\r\n            message: 'Could not save. Please log in'\r\n          });\r\n        }\r\n      });\r\n  };\r\n\r\n  onToolsMenuChange = node => {\r\n    let { currentNode, data } = this.state;\r\n    const { history } = this.state;\r\n\r\n    if (node.verbs) {\r\n      if (currentNode.verbs.includes(node.verbs[0])) {\r\n        const newNode = {\r\n          verbs: currentNode.verbs.filter(verb => verb !== node.verbs[0])\r\n        };\r\n        // eslint-disable-next-line no-prototype-builtins\r\n        if (node.hasOwnProperty('isSubPath')) {\r\n          newNode.isSubPath = node.isSubPath;\r\n        }\r\n        currentNode = { ...currentNode, ...newNode };\r\n      } else {\r\n        const newNode = { verbs: currentNode.verbs.concat(node.verbs) };\r\n        // eslint-disable-next-line no-prototype-builtins\r\n        if (node.hasOwnProperty('isSubPath')) {\r\n          newNode.isSubPath = node.isSubPath;\r\n        }\r\n        currentNode = { ...currentNode, ...newNode };\r\n      }\r\n    } else {\r\n      currentNode = { ...currentNode, ...node };\r\n    }\r\n    data = updateTree(data, currentNode);\r\n    history.push(data);\r\n    this.setState({\r\n      data,\r\n      history,\r\n      currentNode,\r\n      saved: false\r\n    });\r\n    this.requestLivePreview(data);\r\n  };\r\n\r\n  onPreviewClick = () => {\r\n    const { isLivePreviewOpen, data } = this.state;\r\n    this.setState({\r\n      isLivePreviewOpen: !isLivePreviewOpen\r\n    });\r\n\r\n    if (!isLivePreviewOpen) {\r\n      this.requestLivePreview(data);\r\n    }\r\n  };\r\n\r\n  onEditClick = () => {\r\n    const { isEditMenuOpen } = this.state;\r\n    this.setState({\r\n      isEditMenuOpen: !isEditMenuOpen\r\n    });\r\n  };\r\n\r\n  onPreviewClose = () => {\r\n    this.setState({ isLivePreviewOpen: false });\r\n  };\r\n\r\n  onUndo = () => {\r\n    const { history } = this.state;\r\n    if (history.length === 0) {\r\n      return;\r\n    }\r\n\r\n    const data = history.pop();\r\n    this.setState({ currentNode: data, data, history });\r\n  };\r\n\r\n  setFocus = onFocus => {\r\n    const { focus } = this.state;\r\n    if (focus !== onFocus) {\r\n      this.setState({ focus: onFocus });\r\n    }\r\n  };\r\n\r\n  requestLivePreview = async data => {\r\n    const { isLivePreviewOpen, refinerRules } = this.state;\r\n    const organizationId = this.state.organizationId\r\n      ? this.state.organizationId\r\n      : 1;\r\n    if (isLivePreviewOpen) {\r\n      // Promise tracker to display a loading spinner\r\n      trackPromise(\r\n        SwaggerAPI.requestLivePreview(\r\n          { data, refinerRules },\r\n          organizationId\r\n        ).then(result => {\r\n          this.setState({ livePreviewSwagger: result });\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      currentNode,\r\n      data,\r\n      focus,\r\n      isLivePreviewOpen,\r\n      isEditMenuOpen,\r\n      livePreviewSwagger\r\n    } = this.state;\r\n    const { classes, location } = this.props;\r\n    const modelId = location.state ? location.state.modelId : null;\r\n\r\n    const preview = (\r\n      <ResizePanel\r\n        direction=\"w\"\r\n        handleClass={classes.customHandle}\r\n        borderClass={classes.customResizeBorder}\r\n        style={{\r\n          position: 'inherit',\r\n          right: '0',\r\n          width: '45%',\r\n          maxWidth: '80%',\r\n          zIndex: 10\r\n        }}\r\n      >\r\n        <LivePreview\r\n          swagger={livePreviewSwagger}\r\n          onPreviewClick={this.onPreviewClick}\r\n        />\r\n      </ResizePanel>\r\n    );\r\n\r\n    let treeWidth = '';\r\n\r\n    if (isLivePreviewOpen) {\r\n      treeWidth = isEditMenuOpen ? 'small-tree' : 'left-half-tree';\r\n    } else {\r\n      treeWidth = isEditMenuOpen ? 'right-half-tree' : 'full-tree';\r\n    }\r\n\r\n    return data ? (\r\n      <div className={classes.svgContainer}>\r\n        <Slide direction=\"right\" in={isEditMenuOpen} mountOnEnter unmountOnExit>\r\n          <EditNodeMenu\r\n            organization={this.state.organizationId}\r\n            modelId={this.state.modelId}\r\n            node={currentNode}\r\n            onToolsMenuChange={this.onToolsMenuChange}\r\n            onEnterDown={() => this.setFocus('tree')}\r\n            isFocus={focus === 'menu'}\r\n            onEditClick={this.onEditClick}\r\n          />\r\n        </Slide>\r\n        <div className={`relative-container ${treeWidth}`}>\r\n          {this.context.user.organizations ? (\r\n            <>\r\n              <Tree\r\n                {...this.props}\r\n                animated\r\n                data={data}\r\n                modelId={modelId}\r\n                currentNode={currentNode}\r\n                isFocus={focus === 'tree'}\r\n                width={treeWidth}\r\n                onNodeSelect={this.onNodeSelect}\r\n                onToolsMenuChange={this.onToolsMenuChange}\r\n                onTreeUpdate={this.onTreeUpdate}\r\n                newModel={() => this.handleNewModelWarningOpen()}\r\n                onLetterDown={() => this.setFocus('menu')}\r\n                onFocus={() => this.setFocus('tree')}\r\n                onUndo={this.onUndo}\r\n              />\r\n            </>\r\n          ) : (\r\n              <>\r\n                <Tree\r\n                  {...this.props}\r\n                  animated\r\n                  data={data}\r\n                  modelId={modelId}\r\n                  currentNode={currentNode}\r\n                  isFocus={focus === 'tree'}\r\n                  width={treeWidth}\r\n                  onNodeSelect={this.onNodeSelect}\r\n                  onToolsMenuChange={this.onToolsMenuChange}\r\n                  onTreeUpdate={this.onTreeUpdate}\r\n                  newModel={() => this.handleNewModelWarningOpen()}\r\n                  onLetterDown={() => this.setFocus('menu')}\r\n                  onFocus={() => this.setFocus('tree')}\r\n                  onUndo={this.onUndo}\r\n                />\r\n              </>\r\n            )}\r\n        </div>\r\n        <Slide\r\n          direction=\"left\"\r\n          in={isLivePreviewOpen}\r\n          mountOnEnter\r\n          unmountOnExit\r\n        >\r\n          {preview}\r\n        </Slide>\r\n        {!isLivePreviewOpen && (\r\n          <IconButton\r\n            id=\"previewShowButton\"\r\n            color=\"primary\"\r\n            onClick={() => this.onPreviewClick()}\r\n            className={classes.showIcon}\r\n          >\r\n            <VisibilityIcon />\r\n          </IconButton>\r\n        )}\r\n        {!isEditMenuOpen && (\r\n          <IconButton\r\n            id=\"editShowButton\"\r\n            color=\"primary\"\r\n            onClick={() => this.onEditClick()}\r\n            className={classes.showIconEdit}\r\n          >\r\n            <VisibilityIcon />\r\n          </IconButton>\r\n        )}\r\n      </div>\r\n    ) : null;\r\n  }\r\n}\r\n\r\nexport default withRouter(withStyles(styles)(MindmapView));\r\n"],"sourceRoot":""}