{"version":3,"sources":["Components/mindmap/Checkbox.js","styles/EditNodeMenu.css.js","Components/mindmap/EditNodeMenu.js","Components/base/MindmapView.js"],"names":["theme","createMuiTheme","overrides","MuiIconButton","root","fontSize","label","display","useStyles","makeStyles","backgroundColor","icon","props","fontWeight","borderRadius","border","customcolor","color","width","height","background","boxShadow","checkedIcon","StyledCheckbox","classes","ThemeProvider","Checkbox","className","clsx","CustomizedCheckbox","style","margin","styles","editContainer","overflowY","overflowX","padding","minWidth","zIndex","fieldContainer","formControl","formLabel","ExpansionPanelDetails","hideEditIcon","marginBottom","hideIconContainer","justifyContent","referencePaper","ToolsMenu","state","models","onChange","node","target","name","checked","verbs","value","referenceId","id","children","onToolsMenuChange","onBranchColorChange","branchColor","hex","onSubpathCheckboxChange","isSubPath","handleChange","event","setState","ModelAPI","getModels","organization","this","pageSize","then","data","filter","model","modelId","prevProps","isFocus","nameInput","focus","onEditClick","patchable","notImplemented","xDescription","verb","IconButton","onClick","Tooltip","title","placement","TextField","disabled","parent","InputLabelProps","shrink","variant","onKeyDown","e","keyCode","onEnterDown","inputRef","input","multiline","description","type","autoComplete","example","FormControl","InputLabel","ref","InputLabelRef","htmlFor","Select","native","OutlinedInput","labelWidth","Paper","Typography","map","key","freezeTag","isArray","triangle","onChangeComplete","queryable","abstract","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","heading","calculated","paginable","queryParams","component","FormLabel","FormGroup","includes","Component","withStyles","MindmapView","history","saved","canBeSaved","currentNode","nodeKey","refinerRules","livePreviewSwagger","isLivePreviewOpen","isEditMenuOpen","location","organizationId","intervalId","onNodeSelect","onTreeUpdate","dataUpdated","push","requestLivePreview","saveModel","hasExited","isPublic","catch","err","response","status","Notification","error","message","newNode","hasOwnProperty","concat","updateTree","onPreviewClick","onPreviewClose","onUndo","length","pop","setFocus","onFocus","a","trackPromise","SwaggerAPI","result","getModel","secsBetweenLastUpdateAndNow","Date","now","updatedAt","getTime","Math","abs","pathname","setInterval","clearInterval","preview","direction","handleClass","customHandle","borderClass","customResizeBorder","position","right","maxWidth","LivePreview","swagger","treeWidth","svgContainer","Slide","in","mountOnEnter","unmountOnExit","EditNodeMenu","context","user","organizations","Tree","animated","newModel","handleNewModelWarningOpen","onLetterDown","showIcon","showIconEdit","contextType","UserContext","withRouter"],"mappings":"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","file":"static/js/17.926a88af.chunk.js","sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nconst theme = createMuiTheme({\n  overrides: {\n    MuiIconButton: {\n      root: {\n        fontSize: '1rem'\n      },\n      label: {\n        display: 'block'\n      }\n    }\n  }\n});\n\nconst useStyles = makeStyles({\n  root: {\n    '&:hover': {\n      backgroundColor: 'transparent'\n    }\n  },\n  icon: props => ({\n    fontSize: '15px',\n    fontWeight: 'bold',\n    borderRadius: 30,\n    display: 'table-cell',\n    border: `3px solid ${props.customcolor}`,\n    color: props.customcolor,\n    width: 90,\n    height: 30,\n    'input:hover ~ &': {\n      backgroundColor: '#ebf1f5'\n    },\n    'input:disabled ~ &': {\n      background: 'rgba(206,217,224,.5)'\n    },\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)'\n  }),\n  checkedIcon: props => ({\n    borderRadius: 30,\n    display: 'table-cell',\n    border: `3px solid ${props.customcolor}`,\n    color: 'white',\n    backgroundColor: `${props.customcolor}`,\n    width: 90,\n    height: 30,\n    'input:hover ~ &': {\n      backgroundColor: '#ebf1f5'\n    },\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)'\n  })\n});\n\nfunction StyledCheckbox(props) {\n  const classes = useStyles(props);\n\n  return (\n    <>\n      <ThemeProvider theme={theme}>\n        <Checkbox\n          className={classes.root}\n          checkedIcon={\n            <span className={clsx(classes.icon, classes.checkedIcon)}>\n              {props.label}\n            </span>\n          }\n          icon={<span className={classes.icon}>{props.label}</span>}\n          {...props}\n        />\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default function CustomizedCheckbox(props) {\n  return (\n    <div style={{ margin: 'auto' }}>\n      <StyledCheckbox {...props} />\n    </div>\n  );\n}\n","const styles = () => {\n  return {\n    margin: {\n      margin: 'auto'\n    },\n    editContainer: {\n      overflowY: 'auto',\n      overflowX: 'hidden',\n      padding: '10px !important',\n      backgroundColor: 'white',\n      width: '20%',\n      minWidth: '20%',\n      zIndex: 10\n    },\n    fieldContainer: {\n      padding: '10px',\n      display: 'grid'\n    },\n    formControl: {\n      margin: '10px'\n    },\n    formLabel: {\n      margin: 'auto',\n      fontSize: '1.4em',\n      padding: '10px'\n    },\n    ExpansionPanelDetails: {\n      display: 'grid'\n    },\n    hideEditIcon: {\n      color: '#324157',\n      width: 'fit-content',\n      marginBottom: '10px'\n    },\n    hideIconContainer: {\n      width: '100%',\n      display: 'flex',\n      justifyContent: 'flex-end'\n    },\n    referencePaper: {\n      padding: '20px',\n      display: 'inline-grid',\n      margin: '10px'\n    }\n  };\n};\n\nexport default styles;\n","/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable jsx-a11y/label-has-for */\nimport React, { Component } from 'react';\nimport {\n  Tooltip,\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  OutlinedInput,\n  Checkbox,\n  ExpansionPanel,\n  ExpansionPanelSummary,\n  Typography,\n  ExpansionPanelDetails,\n  FormLabel,\n  FormGroup,\n  Paper,\n  IconButton\n} from '@material-ui/core';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { withStyles } from '@material-ui/core/styles';\nimport { TwitterPicker } from 'react-color';\nimport CustomizedCheckbox from './Checkbox';\nimport ModelAPI from '../../api/ModelAPI';\nimport styles from '../../styles/EditNodeMenu.css';\n\nclass ToolsMenu extends Component {\n  state = {\n    models: []\n  };\n\n  componentDidMount() {\n    ModelAPI.getModels({\n      organization: this.props.organization,\n      pageSize: 0\n    }).then(models => {\n      this.setState({\n        models: models.data.data.filter(\n          model => model.id !== this.props.modelId\n        )\n      });\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.isFocus !== prevProps.isFocus && this.nameInput) {\n      this.nameInput.focus();\n    }\n  }\n\n  onChange = ({ target }) => {\n    let node;\n    if (\n      target.name === 'abstract' ||\n      target.name === 'queryable' ||\n      target.name === 'paginable' ||\n      target.name === 'calculated' ||\n      target.name === 'patchable' ||\n      target.name === 'notImplemented' ||\n      target.name === 'isArray'\n    ) {\n      node = { [target.name]: target.checked };\n    } else if (\n      target.name === 'SEARCH' ||\n      target.name === 'POST' ||\n      target.name === 'GET' ||\n      target.name === 'PUT' ||\n      target.name === 'DELETE'\n    ) {\n      node = { verbs: [target.name] };\n    } else {\n      node = { [target.name]: target.value };\n    }\n\n    if (target.name === 'type' && target.value === 'reference') {\n      node.referenceId = this.state.models[0].id;\n      node.children = [];\n    }\n\n    this.props.onToolsMenuChange(node);\n  };\n\n  onBranchColorChange = color => {\n    const node = { branchColor: color.hex };\n    this.props.onToolsMenuChange(node);\n  };\n\n  onSubpathCheckboxChange = ({ target }) => {\n    const node = { isSubPath: target.checked };\n    // onToolsMenuChange requires to set the verbs in order to autoselect operations\n    // when creating a new child node\n    // Also, we can't just pass READ and UPDATE, all fields are required\n    if (target.checked) {\n      node.verbs = ['SEARCH', 'POST', 'PUT', 'GET', 'DELETE'];\n    }\n    this.props.onToolsMenuChange(node);\n  };\n\n  handleChange = name => event => {\n    this.setState({ ...name, [name]: event.target.checked });\n  };\n\n  render() {\n    const { node, classes, onEditClick } = this.props;\n    node.patchable = !!node.patchable;\n    node.notImplemented = !!node.notImplemented;\n    node.xDescription = node.xDescription || '';\n    node.verbs = node.verbs || ['SEARCH', 'POST', 'PUT', 'GET', 'DELETE'];\n    node.branchColor = node.branchColor || '#FCB900';\n\n    node.verbs = node.verbs.filter(verb => verb !== 'UPDATE'); // Update should not be a verb\n\n    return (\n      <div className={classes.editContainer}>\n        <div className={classes.fieldContainer}>\n          <div className={classes.hideIconContainer}>\n            <IconButton\n              id=\"editHideButton\"\n              onClick={onEditClick}\n              className={classes.hideEditIcon}\n            >\n              <VisibilityOffIcon />\n            </IconButton>\n          </div>\n          <label className=\"title-menu\">Edit attribute</label>\n\n          <Tooltip\n            title=\"Name of the attribute. Special case: if you specify comma-separated words, they'll serve as a list of possible values for the parent\"\n            placement=\"right\"\n          >\n            <TextField\n              disabled={!node.parent}\n              InputLabelProps={{ shrink: true }}\n              id=\"outlined-email-input\"\n              label=\"Label\"\n              name=\"name\"\n              margin=\"normal\"\n              variant=\"outlined\"\n              onChange={this.onChange}\n              onKeyDown={e => {\n                if (e.keyCode === 13) {\n                  this.props.onEnterDown();\n                }\n              }}\n              className=\"item-sidepanel\"\n              value={node.name}\n              inputRef={input => {\n                this.nameInput = input;\n              }}\n            />\n          </Tooltip>\n\n          {node.parent && (\n            <>\n              <Tooltip\n                title=\"A description to help developer who will use the API\"\n                placement=\"right\"\n              >\n                <TextField\n                  multiline\n                  disabled={!node.parent}\n                  InputLabelProps={{ shrink: true }}\n                  id=\"outlined-textarea\"\n                  label=\"Description\"\n                  name=\"description\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  onChange={this.onChange}\n                  className=\"item-sidepanel\"\n                  value={node.description}\n                />\n              </Tooltip>\n              <Tooltip\n                title=\"The description that isn't public or included in the specification but only displayed to help API\"\n                placement=\"right\"\n              >\n                <TextField\n                  multiline\n                  disabled={!node.parent}\n                  InputLabelProps={{ shrink: true }}\n                  id=\"outlined-email-input\"\n                  label=\"Example\"\n                  type=\"example\"\n                  name=\"example\"\n                  autoComplete=\"example\"\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  onChange={this.onChange}\n                  className=\"item-sidepanel\"\n                  value={node.example}\n                />\n              </Tooltip>\n              <FormControl\n                disabled={!node.parent}\n                variant=\"outlined\"\n                margin=\"normal\"\n              >\n                <InputLabel\n                  ref={ref => {\n                    this.InputLabelRef = ref;\n                  }}\n                  htmlFor=\"type-select\"\n                >\n                  Type\n                </InputLabel>\n                <Select\n                  className=\"dropdown\"\n                  native\n                  value={node.type}\n                  onChange={this.onChange}\n                  input={\n                    <OutlinedInput\n                      name=\"type\"\n                      labelWidth={35}\n                      id=\"type-select\"\n                    />\n                  }\n                >\n                  <option value=\"integer\">integer</option>\n                  <option value=\"number\">number</option>\n                  <option value=\"string\">text</option>\n                  <option value=\"boolean\">boolean</option>\n                  <option value=\"array\">list</option>\n                  <option value=\"object\">object</option>\n                  <option value=\"reference\">reference to...</option>\n                </Select>\n              </FormControl>\n              {node.type === 'reference' && (\n                <Paper className={classes.referencePaper}>\n                  <Typography>Reference</Typography>\n                  <FormControl variant=\"outlined\" margin=\"normal\">\n                    <InputLabel\n                      ref={ref => {\n                        this.InputLabelRef = ref;\n                      }}\n                      htmlFor=\"reference-select\"\n                    >\n                      Model\n                    </InputLabel>\n                    <Select\n                      className=\"dropdown\"\n                      native\n                      value={node.referenceId}\n                      onChange={this.onChange}\n                      input={\n                        <OutlinedInput\n                          name=\"referenceId\"\n                          labelWidth={45}\n                          id=\"reference-select\"\n                        />\n                      }\n                    >\n                      {this.state.models.map(model => {\n                        return (\n                          <option key={model.id} value={model.id}>{`${\n                            model.name\n                          }${\n                            model.freezeTag !== '0' ? ' (frozen)' : ''\n                          }`}</option>\n                        );\n                      })}\n                    </Select>\n                  </FormControl>\n                  <Tooltip\n                    title=\"Determine if the reference model should be a simple object or an array\"\n                    placement=\"right\"\n                  >\n                    <label>\n                      <Checkbox\n                        color=\"default\"\n                        onChange={this.onChange}\n                        type=\"checkbox\"\n                        name=\"isArray\"\n                        checked={node.isArray}\n                      />\n                      Is Array\n                    </label>\n                  </Tooltip>\n                  <>\n                    <Tooltip\n                      title=\"Define branch color (with children)\"\n                      placement=\"right\"\n                    >\n                      <label\n                        style={{ fontSize: '14px', 'padding-bottom': '10px' }}\n                      >\n                        Color Branch\n                      </label>\n                    </Tooltip>\n                    <TwitterPicker\n                      color={node.branchColor}\n                      triangle=\"hide\"\n                      width=\"auto\"\n                      onChangeComplete={this.onBranchColorChange}\n                      style={{ 'padding-bottom': '20px', margin: 'auto' }}\n                    />\n                  </>\n                </Paper>\n              )}\n              {node.type !== 'reference' && (\n                <Tooltip\n                  title=\"make this field searchable (include it in query params for searchs with GET /objects?field=...)\"\n                  placement=\"right\"\n                >\n                  <label>\n                    <Checkbox\n                      disabled={!node.parent}\n                      color=\"default\"\n                      onChange={this.onChange}\n                      type=\"checkbox\"\n                      name=\"queryable\"\n                      checked={node.queryable}\n                    />\n                    Searchable\n                  </label>\n                </Tooltip>\n              )}\n              <Tooltip\n                title=\"make this field appear in search results (reponse to GET /objects)\"\n                placement=\"right\"\n              >\n                <label>\n                  <Checkbox\n                    disabled={!node.parent}\n                    color=\"default\"\n                    onChange={this.onChange}\n                    type=\"checkbox\"\n                    name=\"abstract\"\n                    checked={node.abstract}\n                  />\n                  In abstract\n                </label>\n              </Tooltip>\n            </>\n          )}\n          {node.type !== 'reference' && (\n            <ExpansionPanel>\n              <ExpansionPanelSummary\n                expandIcon={<ExpandMoreIcon />}\n                aria-controls=\"panel1a-content\"\n                id=\"panel1a-header\"\n              >\n                <Typography className={classes.heading}>\n                  Advanced settings\n                </Typography>\n              </ExpansionPanelSummary>\n              <ExpansionPanelDetails className={classes.ExpansionPanelDetails}>\n                <>\n                  <Tooltip\n                    title=\"Define color branch (with children)\"\n                    placement=\"right\"\n                  >\n                    <label\n                      style={{ fontSize: '14px', 'padding-bottom': '10px' }}\n                    >\n                      Color branch\n                    </label>\n                  </Tooltip>\n                  <TwitterPicker\n                    color={node.branchColor}\n                    triangle=\"hide\"\n                    width=\"auto\"\n                    onChangeComplete={this.onBranchColorChange}\n                    style={{ 'padding-bottom': '20px', margin: 'auto' }}\n                  />\n                </>\n                {node.parent && (\n                  <>\n                    <Tooltip\n                      title=\"Make a sub context for this field (will be accessible by GET /objects/thisfield).\"\n                      placement=\"right\"\n                    >\n                      <label>\n                        <Checkbox\n                          disabled={!node.parent}\n                          color=\"default\"\n                          onChange={this.onSubpathCheckboxChange}\n                          type=\"checkbox\"\n                          name=\"isSubPath\"\n                          checked={node.isSubPath}\n                        />\n                        Subpath\n                      </label>\n                    </Tooltip>\n                    <Tooltip\n                      title=\"When this box is checked, the attribute will be individually updatable. Otherwise, updates are only possible for all the fields together.\"\n                      placement=\"right\"\n                    >\n                      <label>\n                        <Checkbox\n                          disabled={!node.parent}\n                          color=\"default\"\n                          onChange={this.onChange}\n                          type=\"checkbox\"\n                          name=\"patchable\"\n                          checked={node.patchable}\n                        />\n                        Partial update\n                      </label>\n                    </Tooltip>\n                    <Tooltip\n                      title=\"Fields that are not yet implemented do not appear in the specification result\"\n                      placement=\"right\"\n                    >\n                      <label style={{ fontSize: '14px' }}>\n                        <Checkbox\n                          disabled={!node.parent}\n                          color=\"default\"\n                          onChange={this.onChange}\n                          type=\"checkbox\"\n                          name=\"notImplemented\"\n                          checked={node.notImplemented}\n                        />\n                        Not yet implemented\n                      </label>\n                    </Tooltip>\n                    <Tooltip\n                      title=\"calculated fields are not included in object creation requests (POST body) because one does not know their value at creation time\"\n                      placement=\"right\"\n                    >\n                      <label>\n                        <Checkbox\n                          disabled={!node.parent}\n                          color=\"default\"\n                          onChange={this.onChange}\n                          type=\"checkbox\"\n                          name=\"calculated\"\n                          checked={node.calculated}\n                        />\n                        Calculated\n                      </label>\n                    </Tooltip>\n                  </>\n                )}\n                {node.type !== 'reference' && (\n                  <>\n                    <Tooltip\n                      title=\"make the results paginated (adds the query parameters page & pageSize)\"\n                      placement=\"right\"\n                    >\n                      <label>\n                        <Checkbox\n                          disabled={\n                            ((!node.isSubPath || node.type !== 'array') &&\n                              !!node.parent) ||\n                            false\n                          }\n                          color=\"default\"\n                          onChange={this.onChange}\n                          type=\"checkbox\"\n                          name=\"paginable\"\n                          checked={node.paginable}\n                        />\n                        Pagination\n                      </label>\n                    </Tooltip>\n                    <Tooltip\n                      title=\"Optionally define here additionals query params, comma-separated. Those terms come in addition to the ones that are 'searchable'\"\n                      placement=\"right\"\n                    >\n                      <TextField\n                        disabled={\n                          ((!node.isSubPath || node.type !== 'array') &&\n                            !!node.parent) ||\n                          false\n                        }\n                        label=\"Query Params\"\n                        type=\"queryParams\"\n                        name=\"queryParams\"\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        onChange={this.onChange}\n                        className=\"item-sidepanel\"\n                        value={node.queryParams || ''}\n                      />\n                    </Tooltip>\n                    <Tooltip\n                      title=\"An optional, internal explanation for those who have to implement this API. For instance the database where to find the data for this attribute. (Not included in the public specification)\"\n                      placement=\"right\"\n                    >\n                      <TextField\n                        multiline\n                        disabled={!node.parent}\n                        InputLabelProps={{ shrink: true }}\n                        id=\"outlined-textarea\"\n                        label=\"Internal Description\"\n                        name=\"xDescription\"\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        onChange={this.onChange}\n                        className=\"item-sidepanel\"\n                        value={node.xDescription}\n                      />\n                    </Tooltip>\n                  </>\n                )}\n                {(node.isSubPath || !node.parent) && (\n                  <FormControl\n                    component=\"fieldset\"\n                    className={classes.formControl}\n                  >\n                    <FormLabel className={classes.formLabel} component=\"legend\">\n                      Operations\n                    </FormLabel>\n                    <FormGroup>\n                      {(!node.parent || node.type === 'array') && (\n                        <CustomizedCheckbox\n                          customcolor=\"#61affe\"\n                          label=\"SEARCH\"\n                          name=\"SEARCH\"\n                          type=\"checkbox\"\n                          checked={node.verbs.includes('SEARCH')}\n                          onChange={this.onChange}\n                        />\n                      )}\n                      {(!node.parent || node.type === 'array') && (\n                        <CustomizedCheckbox\n                          customcolor=\"#49cc90\"\n                          label=\"CREATE\"\n                          name=\"POST\"\n                          type=\"checkbox\"\n                          checked={node.verbs.includes('POST')}\n                          onChange={this.onChange}\n                        />\n                      )}\n                      <CustomizedCheckbox\n                        customcolor=\"#61affe\"\n                        label=\"READ\"\n                        name=\"GET\"\n                        type=\"checkbox\"\n                        checked={node.verbs.includes('GET')}\n                        onChange={this.onChange}\n                      />\n                      <CustomizedCheckbox\n                        customcolor=\"#fca130\"\n                        label=\"UPDATE\"\n                        name=\"PUT\"\n                        type=\"checkbox\"\n                        checked={node.verbs.includes('PUT')}\n                        onChange={this.onChange}\n                      />\n                      {(!node.parent || node.type === 'array') && (\n                        <CustomizedCheckbox\n                          customcolor=\"#f93e3e\"\n                          label=\"DELETE\"\n                          name=\"DELETE\"\n                          type=\"checkbox\"\n                          checked={node.verbs.includes('DELETE')}\n                          onChange={this.onChange}\n                        />\n                      )}\n                    </FormGroup>\n                  </FormControl>\n                )}\n              </ExpansionPanelDetails>\n            </ExpansionPanel>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(ToolsMenu);\n","/* eslint-disable consistent-return */\nimport React, { Component } from 'react';\nimport { Notification } from 'element-react';\nimport { withRouter } from 'react-router-dom';\nimport Slide from '@material-ui/core/Slide';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport IconButton from '@material-ui/core/IconButton';\nimport { withStyles } from '@material-ui/core/styles';\nimport ResizePanel from 'react-resize-panel';\nimport { trackPromise } from 'react-promise-tracker';\nimport Tree from '../mindmap/Tree';\nimport { updateTree } from '../../helpers/tree_helper';\nimport EditNodeMenu from '../mindmap/EditNodeMenu';\nimport LivePreview from '../mindmap/LivePreview';\nimport SwaggerAPI from '../../api/SwaggerAPI';\nimport ModelAPI from '../../api/ModelAPI';\nimport styles from '../../styles/MindmapView.css';\nimport { UserContext } from '../../contexts/UserContext';\n\nconst secondsBeforeEdit = process.env.NODE_ENV !== 'production' ? 0 : 11;\n\nclass MindmapView extends Component {\n  static contextType = UserContext;\n\n  state = {\n    history: [],\n    saved: false,\n    canBeSaved: false,\n    currentNode: { nodeKey: '' },\n    data: { children: [], name: '' },\n    refinerRules: [],\n    livePreviewSwagger: null,\n    isLivePreviewOpen: true,\n    isEditMenuOpen: true,\n    focus: 'tree',\n    modelId: this.props.location.state\n      ? this.props.location.state.modelId\n      : null,\n    organizationId: this.props.location.state\n      ? this.props.location.state.organizationId\n      : null\n  };\n\n  intervalId = null;\n\n  componentDidMount() {\n    const { location, history } = this.props;\n\n    if (!location.state) {\n      history.push('/dashboard');\n    } else {\n      const { data, modelId, isPublic } = location.state;\n\n      if (!isPublic) {\n        ModelAPI.getModel(modelId).then(model => {\n          // TODO: Remove this s...\n          // Check for 11 seconds between model updatedAt field and now\n          // Then allow to edit model or redirect on Dashboard page\n          const secsBetweenLastUpdateAndNow = (Date.now() - new Date(model.updatedAt).getTime()) / 1000;\n\n          if ((!model.hasExited) && (Math.abs(secsBetweenLastUpdateAndNow) < secondsBeforeEdit)) {\n            history.push({\n              pathname: '/dashboard',\n              state: {\n                error: 'Someone already editing this model. Please try again later'\n              }\n            });\n          }\n\n          this.setState(\n            {\n              data: model.data,\n              refinerRules: model.refinerRules || [],\n              currentNode: { ...model.data },\n              canBeSaved: true\n            },\n            () => {\n              this.saveModel(false);\n              this.requestLivePreview(this.state.data);\n            }\n          );\n        });\n      } else {\n        this.setState(\n          {\n            data,\n            currentNode: { ...data }\n          },\n          () => {\n            this.saveModel(false);\n            this.requestLivePreview(this.state.data);\n          }\n        );\n      }\n\n      this.intervalId = setInterval(() => {\n        if (this.state.canBeSaved) {\n          this.saveModel(false);\n        }\n      }, 10000);\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n    if (this.state.canBeSaved) {\n      this.saveModel(true);\n    }\n}\n\n  onNodeSelect = node => {\n    this.setState({\n      currentNode: { ...node }\n    });\n  };\n\n  onTreeUpdate = ({ dataUpdated, currentNode }) => {\n    const { history, data } = this.state;\n    history.push(data);\n    this.setState({ data: dataUpdated, currentNode, history, saved: false });\n    this.requestLivePreview(dataUpdated);\n  };\n\n  saveModel = (hasExited) => {\n    // eslint-disable-next-line\n    const { saved, modelId, data } = this.state;\n    const { isPublic } = this.props.location.state;\n\n    if (!hasExited) {\n//      if (saved || isPublic) {   tant que le verrou d'édition concurrente est basé sur la date de sauvegarde, il faut sauvegarder même si pas de changement\n        if (isPublic) {\n          return;\n      }\n    }\n\n    ModelAPI.saveModel(modelId, { data }, hasExited)\n      .then(() => {\n        this.setState({ saved: true });\n      })\n      .catch(err => {\n        if (err.response.status === 403) {\n          Notification.error({\n            title: 'Error',\n            message:\n              'You can only modify your own models. Please ask your team leader if you need a modification on this model.'\n          });\n        } else {\n          Notification.error({\n            title: 'Error',\n            message: 'Could not save. Please log in'\n          });\n        }\n      });\n  };\n\n  onToolsMenuChange = node => {\n    let { currentNode, data } = this.state;\n    const { history } = this.state;\n\n    if (node.verbs) {\n      if (currentNode.verbs.includes(node.verbs[0])) {\n        const newNode = {\n          verbs: currentNode.verbs.filter(verb => verb !== node.verbs[0])\n        };\n        // eslint-disable-next-line no-prototype-builtins\n        if (node.hasOwnProperty('isSubPath')) {\n          newNode.isSubPath = node.isSubPath;\n        }\n        currentNode = { ...currentNode, ...newNode };\n      } else {\n        const newNode = { verbs: currentNode.verbs.concat(node.verbs) };\n        // eslint-disable-next-line no-prototype-builtins\n        if (node.hasOwnProperty('isSubPath')) {\n          newNode.isSubPath = node.isSubPath;\n        }\n        currentNode = { ...currentNode, ...newNode };\n      }\n    } else {\n      currentNode = { ...currentNode, ...node };\n    }\n    data = updateTree(data, currentNode);\n    history.push(data);\n    this.setState({\n      data,\n      history,\n      currentNode,\n      saved: false\n    });\n    this.requestLivePreview(data);\n  };\n\n  onPreviewClick = () => {\n    const { isLivePreviewOpen, data } = this.state;\n    this.setState({\n      isLivePreviewOpen: !isLivePreviewOpen\n    });\n\n    if (!isLivePreviewOpen) {\n      this.requestLivePreview(data);\n    }\n  };\n\n  onEditClick = () => {\n    const { isEditMenuOpen } = this.state;\n    this.setState({\n      isEditMenuOpen: !isEditMenuOpen\n    });\n  };\n\n  onPreviewClose = () => {\n    this.setState({ isLivePreviewOpen: false });\n  };\n\n  onUndo = () => {\n    const { history } = this.state;\n    if (history.length === 0) {\n      return;\n    }\n\n    const data = history.pop();\n    this.setState({ currentNode: data, data, history });\n  };\n\n  setFocus = onFocus => {\n    const { focus } = this.state;\n    if (focus !== onFocus) {\n      this.setState({ focus: onFocus });\n    }\n  };\n\n  requestLivePreview = async data => {\n    const { isLivePreviewOpen, refinerRules } = this.state;\n    const organizationId = this.state.organizationId\n      ? this.state.organizationId\n      : 1;\n    if (isLivePreviewOpen) {\n      // Promise tracker to display a loading spinner\n      trackPromise(\n        SwaggerAPI.requestLivePreview(\n          { data, refinerRules },\n          organizationId\n        ).then(result => {\n          this.setState({ livePreviewSwagger: result });\n        })\n      );\n    }\n  };\n\n  render() {\n    const {\n      currentNode,\n      data,\n      focus,\n      isLivePreviewOpen,\n      isEditMenuOpen,\n      livePreviewSwagger\n    } = this.state;\n    const { classes, location } = this.props;\n    const modelId = location.state ? location.state.modelId : null;\n\n    const preview = (\n      <ResizePanel\n        direction=\"w\"\n        handleClass={classes.customHandle}\n        borderClass={classes.customResizeBorder}\n        style={{\n          position: 'inherit',\n          right: '0',\n          width: '45%',\n          maxWidth: '80%',\n          zIndex: 10\n        }}\n      >\n        <LivePreview\n          swagger={livePreviewSwagger}\n          onPreviewClick={this.onPreviewClick}\n        />\n      </ResizePanel>\n    );\n\n    let treeWidth = '';\n\n    if (isLivePreviewOpen) {\n      treeWidth = isEditMenuOpen ? 'small-tree' : 'left-half-tree';\n    } else {\n      treeWidth = isEditMenuOpen ? 'right-half-tree' : 'full-tree';\n    }\n\n    return data ? (\n      <div className={classes.svgContainer}>\n        <Slide direction=\"right\" in={isEditMenuOpen} mountOnEnter unmountOnExit>\n          <EditNodeMenu\n            organization={this.state.organizationId}\n            modelId={this.state.modelId}\n            node={currentNode}\n            onToolsMenuChange={this.onToolsMenuChange}\n            onEnterDown={() => this.setFocus('tree')}\n            isFocus={focus === 'menu'}\n            onEditClick={this.onEditClick}\n          />\n        </Slide>\n        <div className={`relative-container ${treeWidth}`}>\n          {this.context.user.organizations ? (\n            <>\n              <Tree\n                {...this.props}\n                animated\n                data={data}\n                modelId={modelId}\n                currentNode={currentNode}\n                isFocus={focus === 'tree'}\n                width={treeWidth}\n                onNodeSelect={this.onNodeSelect}\n                onToolsMenuChange={this.onToolsMenuChange}\n                onTreeUpdate={this.onTreeUpdate}\n                newModel={() => this.handleNewModelWarningOpen()}\n                onLetterDown={() => this.setFocus('menu')}\n                onFocus={() => this.setFocus('tree')}\n                onUndo={this.onUndo}\n              />\n            </>\n          ) : (\n              <>\n                <Tree\n                  {...this.props}\n                  animated\n                  data={data}\n                  modelId={modelId}\n                  currentNode={currentNode}\n                  isFocus={focus === 'tree'}\n                  width={treeWidth}\n                  onNodeSelect={this.onNodeSelect}\n                  onToolsMenuChange={this.onToolsMenuChange}\n                  onTreeUpdate={this.onTreeUpdate}\n                  newModel={() => this.handleNewModelWarningOpen()}\n                  onLetterDown={() => this.setFocus('menu')}\n                  onFocus={() => this.setFocus('tree')}\n                  onUndo={this.onUndo}\n                />\n              </>\n            )}\n        </div>\n        <Slide\n          direction=\"left\"\n          in={isLivePreviewOpen}\n          mountOnEnter\n          unmountOnExit\n        >\n          {preview}\n        </Slide>\n        {!isLivePreviewOpen && (\n          <IconButton\n            id=\"previewShowButton\"\n            color=\"primary\"\n            onClick={() => this.onPreviewClick()}\n            className={classes.showIcon}\n          >\n            <VisibilityIcon />\n          </IconButton>\n        )}\n        {!isEditMenuOpen && (\n          <IconButton\n            id=\"editShowButton\"\n            color=\"primary\"\n            onClick={() => this.onEditClick()}\n            className={classes.showIconEdit}\n          >\n            <VisibilityIcon />\n          </IconButton>\n        )}\n      </div>\n    ) : null;\n  }\n}\n\nexport default withRouter(withStyles(styles)(MindmapView));\n"],"sourceRoot":""}