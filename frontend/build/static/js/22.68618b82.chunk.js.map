{"version":3,"sources":["Components/email/ResetPassword.js"],"names":["schema","Joi","object","keys","username","string","label","email","tlds","required","ResetPassword","state","invalidForm","error","emailSend","reCaptchaToken","captchaValidation","setState","recaptchaCallback","sendForm","e","preventDefault","EmailAPI","sendResetPassword","then","catch","a","recaptcha","execute","Notification","title","message","handleChanges","type","value","checkForm","data","result","validate","details","goBack","props","history","push","classes","this","errorState","className","container","card","variant","component","iconChecked","subtitle","FormControl","name","textField","margin","helperText","onChange","target","ref","sitekey","Configuration","CAPTCHA_TOKEN","verifyCallback","action","disabled","color","button","endIcon","onClick","role","spanGoBack","PureComponent","withStyles","styles"],"mappings":"mVAkBMA,EAASC,IAAIC,SAASC,KAAK,CAC/BC,SAAUH,IAAII,SACXC,MAAM,SACNC,MAAM,CAAEC,MAAM,IACdC,aAGCC,E,2MACJC,MAAQ,CACNP,SAAU,GACVQ,aAAa,EACbC,MAAO,GACPC,WAAW,EACXC,eAAgB,I,EAGlBC,kBAAoB,SAAAD,GAClB,EAAKE,SACH,CAAEF,mBACF,kBAAM,EAAKG,mBAAqB,EAAKA,wB,EAIzCC,SAAW,SAAAC,GAAM,IAAD,EAIV,EAAKT,MAFPP,EAFY,EAEZA,SACAW,EAHY,EAGZA,eAEFK,EAAEC,iBAEFC,IAASC,kBAAkBnB,EAAUW,GAClCS,MAAK,WACJ,EAAKP,SAAS,CAAEH,WAAW,OAE5BW,MAJH,sBAIS,sBAAAC,EAAA,sEACC,EAAKC,UAAUC,UADhB,OAELC,eAAahB,MAAM,CACjBiB,MAAO,QACPC,QAAS,6BAJN,kD,EASXC,cAAgB,SAACC,EAAMC,GACrB,EAAKjB,SAAL,eAAiBgB,EAAOC,GAAS,EAAKC,Y,EAGxCA,UAAY,WAAO,IAEXC,EAAO,CACXhC,SAFmB,EAAKO,MAAlBP,UAKFiC,EAASrC,EAAOsC,SAASF,GAC/B,EAAKnB,SAAS,CACZL,cAAeyB,EAAOxB,MACtBA,MAAOwB,EAAOxB,MAAQwB,EAAOxB,MAAM0B,QAAQ,GAAGR,QAAU,Q,EAI5DS,OAAS,WACa,EAAKC,MAAjBC,QACAC,KAAK,W,wEAGL,IAAD,OACCC,EAAYC,KAAKJ,MAAjBG,QADD,EAEmCC,KAAKlC,MAAvCE,EAFD,EAECA,MAAOD,EAFR,EAEQA,YAAaE,EAFrB,EAEqBA,UACtBgC,IAAejC,EAErB,OACE,yBAAKkC,UAAWH,EAAQI,WACtB,kBAAC,IAAD,CAAOD,UAAWH,EAAQK,MACvBnC,EACC,oCACE,kBAAC,IAAD,CAAYoC,QAAQ,KAAKC,UAAU,MAAnC,2BAGA,kBAAC,IAAD,CAAiBJ,UAAWH,EAAQQ,cACpC,kBAAC,IAAD,CAAYD,UAAU,SAAtB,6CAKF,oCACE,kBAAC,IAAD,CAAYD,QAAQ,KAAKC,UAAU,MAAnC,yBAGA,kBAAC,IAAD,CAAYA,UAAU,YAAYJ,UAAWH,EAAQS,UAArD,+DAGA,kBAAC,IAAD,CAAaN,UAAWH,EAAQU,aAC9B,kBAAC,IAAD,CACEzC,MAAOiC,EACPxC,MAAM,QACNiD,KAAK,QACLR,UAAWH,EAAQY,UACnBC,OAAO,SACPP,QAAQ,WACRQ,WAAY7C,EACZ8C,SAAU,SAAAvC,GACR,EAAKY,cAAc,WAAYZ,EAAEwC,OAAO1B,UAG5C,kBAAC,YAAD,CACE2B,IAAK,SAACA,GAAU,EAAKlC,UAAYkC,GACjCC,QAASC,IAAcC,cACvBC,eAAgBpB,KAAK7B,kBACrBkD,OAAO,iBAGT,kBAAC,IAAD,CACEC,SAAUvD,EACVqB,KAAK,SACLiB,QAAQ,YACRkB,MAAM,UACNrB,UAAWH,EAAQyB,OACnBC,QAAS,kBAAC,IAAD,MACTC,QAAS1B,KAAK1B,UAPhB,SAaF,0BAAMqD,KAAK,eAAeD,QAAS1B,KAAKL,QACtC,0BAAMO,UAAWH,EAAQ6B,YAAzB,4B,GAtHYC,iBAgIbC,sBAAWC,IAAXD,CAAmBjE","file":"static/js/22.68618b82.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport Joi from '@hapi/joi';\nimport {\n  Paper,\n  Typography,\n  TextField,\n  Button,\n  FormControl\n} from '@material-ui/core';\nimport { ReCaptcha } from 'react-recaptcha-v3';\nimport SendIcon from '@material-ui/icons/Send';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport { Notification } from 'element-react';\nimport { withStyles } from '@material-ui/core/styles';\nimport styles from '../../styles/ResetPassword.css';\nimport EmailAPI from '../../api/EmailAPI';\nimport Configuration from '../../helpers/configuration';\n\nconst schema = Joi.object().keys({\n  username: Joi.string()\n    .label('Email')\n    .email({ tlds: false })\n    .required()\n});\n\nclass ResetPassword extends PureComponent {\n  state = {\n    username: '',\n    invalidForm: true,\n    error: '',\n    emailSend: false,\n    reCaptchaToken: ''\n  };\n\n  captchaValidation = reCaptchaToken => {\n    this.setState(\n      { reCaptchaToken },\n      () => this.recaptchaCallback && this.recaptchaCallback()\n    );\n  };\n\n  sendForm = e => {\n    const {\n      username,\n      reCaptchaToken\n    } = this.state;\n    e.preventDefault();\n\n    EmailAPI.sendResetPassword(username, reCaptchaToken)\n      .then(() => {\n        this.setState({ emailSend: true });\n      })\n      .catch(async () => {\n        await this.recaptcha.execute();\n        Notification.error({\n          title: 'Error',\n          message: 'The email was not found.'\n        });\n      });\n  };\n\n  handleChanges = (type, value) => {\n    this.setState({ [type]: value }, this.checkForm);\n  };\n\n  checkForm = () => {\n    const { username } = this.state;\n    const data = {\n      username\n    };\n\n    const result = schema.validate(data);\n    this.setState({\n      invalidForm: !!result.error,\n      error: result.error ? result.error.details[0].message : null\n    });\n  };\n\n  goBack = () => {\n    const { history } = this.props;\n    history.push('/login');\n  };\n\n  render() {\n    const { classes } = this.props;\n    const { error, invalidForm, emailSend } = this.state;\n    const errorState = !!error;\n\n    return (\n      <div className={classes.container}>\n        <Paper className={classes.card}>\n          {emailSend ? (\n            <>\n              <Typography variant=\"h5\" component=\"h5\">\n                An email has been sent!\n              </Typography>\n              <CheckCircleIcon className={classes.iconChecked} />\n              <Typography component=\"body1\">\n                Check your inbox to reset your password.\n              </Typography>\n            </>\n          ) : (\n            <>\n              <Typography variant=\"h4\" component=\"h1\">\n                Forgot your password?\n              </Typography>\n              <Typography component=\"subtitle1\" className={classes.subtitle}>\n                We will send you an email to help you change your password.\n              </Typography>\n              <FormControl className={classes.FormControl}>\n                <TextField\n                  error={errorState}\n                  label=\"Email\"\n                  name=\"email\"\n                  className={classes.textField}\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  helperText={error}\n                  onChange={e => {\n                    this.handleChanges('username', e.target.value);\n                  }}\n                />\n                <ReCaptcha\n                  ref={(ref) => { this.recaptcha = ref }}\n                  sitekey={Configuration.CAPTCHA_TOKEN}\n                  verifyCallback={this.captchaValidation}\n                  action='registration'\n                />\n\n                <Button\n                  disabled={invalidForm}\n                  type=\"submit\"\n                  variant=\"contained\"\n                  color=\"primary\"\n                  className={classes.button}\n                  endIcon={<SendIcon />}\n                  onClick={this.sendForm}\n                >\n                  Send\n                </Button>\n              </FormControl>\n\n              <span role=\"presentation\" onClick={this.goBack}>\n                <span className={classes.spanGoBack}>Go back to login</span>\n              </span>\n            </>\n          )}\n        </Paper>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(ResetPassword);\n"],"sourceRoot":""}