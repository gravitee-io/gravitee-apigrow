{"version":3,"sources":["Components/mindmap/frozen/FrozenMindmapView.js"],"names":["MindmapFrozenView","state","data","children","name","currentNode","nodeKey","frozenDate","isLivePreviewOpen","livePreviewSwagger","focus","organizationId","props","location","onPreviewClick","setState","requestLivePreview","a","trackPromise","SwaggerAPI","then","result","setFocus","onFocus","model","this","history","updatedAt","classes","modelId","preview","direction","handleClass","customHandle","borderClass","customResizeBorder","style","position","right","width","maxWidth","zIndex","swagger","className","svgContainer","treeContainer","headbandFrozenVersion","Date","toLocaleString","transparentFilter","customFrozenMindmapZoom","animated","isFocus","onToolsMenuChange","in","mountOnEnter","unmountOnExit","id","color","onClick","showIconFrozenTree","Component","contextType","UserContext","withStyles","styles"],"mappings":"6SAgBMA,E,2MAGJC,MAAQ,CACNC,KAAM,CAAEC,SAAU,GAAIC,KAAM,IAC5BC,YAAa,CAAEC,QAAS,IACxBC,WAAY,GACZC,mBAAmB,EACnBC,mBAAoB,KACpBC,MAAO,OACPC,eAAgB,EAAKC,MAAMC,SAASZ,MAChC,EAAKW,MAAMC,SAASZ,MAAMU,eAC1B,M,EAgBNG,eAAiB,WAAO,IAAD,EACe,EAAKb,MAAjCO,EADa,EACbA,kBAAmBN,EADN,EACMA,KAC3B,EAAKa,SAAS,CACZP,mBAAoBA,IAGjBA,GACH,EAAKQ,mBAAmBd,I,EAI5Bc,mB,uCAAqB,WAAMd,GAAN,iBAAAe,EAAA,sDACXT,EAAsB,EAAKP,MAA3BO,kBACFG,EAAiB,EAAKV,MAAMU,eAC9B,EAAKV,MAAMU,eACX,EACAH,GAEFU,uBACEC,IAAWH,mBAAmB,CAAEd,QAAQS,GAAgBS,MAAK,SAAAC,GAC3D,EAAKN,SAAS,CAAEN,mBAAoBY,QATvB,gD,wDAerBC,SAAW,SAAAC,GACS,EAAKtB,MAAfS,QACMa,GACZ,EAAKR,SAAS,CAAEL,MAAOa,K,mFA1CN,IAEXC,EADaC,KAAKb,MAAMc,QAAxBb,SACmBZ,MAAnBuB,MAERC,KAAKV,SAAS,CACZb,KAAMsB,EAAMtB,KACZG,YAAY,eAAMmB,EAAMtB,MACxBK,WAAYiB,EAAMG,YAGpBF,KAAKT,mBAAmBQ,EAAMtB,Q,+BAoCtB,IAAD,SAQHuB,KAAKxB,MANPC,EAFK,EAELA,KACAG,EAHK,EAGLA,YACAE,EAJK,EAILA,WACAG,EALK,EAKLA,MACAF,EANK,EAMLA,kBACAC,EAPK,EAOLA,mBAPK,EAUuBgB,KAAKb,MAA3BgB,EAVD,EAUCA,QAASf,EAVV,EAUUA,SACXgB,EAAUhB,EAASZ,MAAQY,EAASZ,MAAM4B,QAAU,KAEpDC,EACJ,kBAAC,IAAD,CACEC,UAAU,IACVC,YAAaJ,EAAQK,aACrBC,YAAaN,EAAQO,mBACrBC,MAAO,CACLC,SAAU,UACVC,MAAO,IACPC,MAAO,MACPC,SAAU,MACVC,OAAQ,KAGV,kBAAC,IAAD,CACEC,QAASjC,EACTK,eAAgBW,KAAKX,kBAO3B,OACE,yBAAK6B,UAAWf,EAAQgB,cACtB,yBAAKD,UAAS,6BAAwBf,EAAQiB,gBAC5C,yBAAKF,UAAWf,EAAQkB,uBACtB,yCACU5C,EAAKE,KADf,wBACmC,IAAI2C,KAAKxC,GAAYyC,eAAe,YAGzE,yBAAKL,UAAWf,EAAQqB,oBACxB,yBAAKN,UAAS,UAXF,YAWE,YAAkBf,EAAQsB,0BACtC,kBAAC,IAAD,CACEC,UAAQ,EACRjD,KAAMA,EACNG,YAAaA,EACbwB,QAASA,EACTuB,QAAmB,SAAV1C,EACT6B,MAlBQ,YAmBRc,kBAAmB5B,KAAK4B,kBACxB9B,QAAS,kBAAM,EAAKD,SAAS,aAInC,kBAAC,IAAD,CACES,UAAU,OACVuB,GAAI9C,EACJ+C,cAAY,EACZC,eAAa,GAEZ1B,IAEDtB,GACA,kBAAC,IAAD,CACEiD,GAAG,oBACHC,MAAM,UACNC,QAAS,kBAAM,EAAK7C,kBACpB6B,UAAWf,EAAQgC,oBAEnB,kBAAC,IAAD,Y,GArIoBC,aAA1B7D,EACG8D,YAAcC,IA4IRC,sBAAWC,IAAXD,CAAmBhE","file":"static/js/23.63b54a97.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Slide from '@material-ui/core/Slide';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport IconButton from '@material-ui/core/IconButton';\nimport { trackPromise } from 'react-promise-tracker';\nimport { withStyles } from '@material-ui/core/styles';\nimport ResizePanel from 'react-resize-panel';\n\nimport Tree from '../Tree';\nimport LivePreview from '../LivePreview';\n\nimport SwaggerAPI from '../../../api/SwaggerAPI';\n\nimport styles from '../../../styles/MindmapView.css';\nimport { UserContext } from '../../../contexts/UserContext';\n\nclass MindmapFrozenView extends Component {\n  static contextType = UserContext;\n\n  state = {\n    data: { children: [], name: '' },\n    currentNode: { nodeKey: '' },\n    frozenDate: '',\n    isLivePreviewOpen: true,\n    livePreviewSwagger: null,\n    focus: 'tree',\n    organizationId: this.props.location.state\n      ? this.props.location.state.organizationId\n      : null\n  };\n\n  componentDidMount() {\n    const { location } = this.props.history;\n    const { model } = location.state;\n\n    this.setState({\n      data: model.data,\n      currentNode: { ...model.data },\n      frozenDate: model.updatedAt\n    });\n\n    this.requestLivePreview(model.data);\n  }\n\n  onPreviewClick = () => {\n    const { isLivePreviewOpen, data } = this.state;\n    this.setState({\n      isLivePreviewOpen: !isLivePreviewOpen\n    });\n\n    if (!isLivePreviewOpen) {\n      this.requestLivePreview(data);\n    }\n  };\n\n  requestLivePreview = async data => {\n    const { isLivePreviewOpen } = this.state;\n    const organizationId = this.state.organizationId\n      ? this.state.organizationId\n      : 1;\n    if (isLivePreviewOpen) {\n      // Promise tracker to display a loading spinner\n      trackPromise(\n        SwaggerAPI.requestLivePreview({ data }, organizationId).then(result => {\n          this.setState({ livePreviewSwagger: result });\n        })\n      );\n    }\n  };\n\n  setFocus = onFocus => {\n    const { focus } = this.state;\n    if (focus !== onFocus) {\n      this.setState({ focus: onFocus });\n    }\n  };\n\n  render() {\n    const {\n      data,\n      currentNode,\n      frozenDate,\n      focus,\n      isLivePreviewOpen,\n      livePreviewSwagger\n    } = this.state;\n\n    const { classes, location } = this.props;\n    const modelId = location.state ? location.state.modelId : null;\n\n    const preview = (\n      <ResizePanel\n        direction=\"w\"\n        handleClass={classes.customHandle}\n        borderClass={classes.customResizeBorder}\n        style={{\n          position: 'inherit',\n          right: '0',\n          width: '60%',\n          maxWidth: '80%',\n          zIndex: 10\n        }}\n      >\n        <LivePreview\n          swagger={livePreviewSwagger}\n          onPreviewClick={this.onPreviewClick}\n        />\n      </ResizePanel>\n    );\n\n    const treeWidth = 'full-tree';\n\n    return (\n      <div className={classes.svgContainer}>\n        <div className={`relative-container ${classes.treeContainer}`}>\n          <div className={classes.headbandFrozenVersion}>\n            <p>\n              {`API ${data.name} - frozen on ${new Date(frozenDate).toLocaleString('en-EN')}`}\n            </p>\n          </div>\n          <div className={classes.transparentFilter} />\n          <div className={`${treeWidth} ${classes.customFrozenMindmapZoom}`}>\n            <Tree\n              animated\n              data={data}\n              currentNode={currentNode}\n              modelId={modelId}\n              isFocus={focus === 'tree'}\n              width={treeWidth}\n              onToolsMenuChange={this.onToolsMenuChange}\n              onFocus={() => this.setFocus('tree')}\n            />\n          </div>\n        </div>\n        <Slide\n          direction=\"left\"\n          in={isLivePreviewOpen}\n          mountOnEnter\n          unmountOnExit\n        >\n          {preview}\n        </Slide>\n        {!isLivePreviewOpen && (\n          <IconButton\n            id=\"previewShowButton\"\n            color=\"primary\"\n            onClick={() => this.onPreviewClick()}\n            className={classes.showIconFrozenTree}\n          >\n            <VisibilityIcon />\n          </IconButton>\n        )}\n      </div>\n    );\n  }\n};\n\nexport default withStyles(styles)(MindmapFrozenView);\n"],"sourceRoot":""}